# This workflow will install needed dependencies and run main grid tests.

name: Grid Client Nightly

on:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:
jobs:
  deployment-scripts:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        network: ["dev", "qa", "test", "main"]
    env:
      NETWORK: ${{ matrix.network }}
      RMB_PROXY: true
      STORE_SECRET: secret
      MNEMONIC: ${{ secrets.MNEMONIC }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

    steps:
      - uses: actions/checkout@v4
        if: ${{ env.NETWORK == 'dev' }}
      - uses: actions/checkout@v4
        if: ${{ env.NETWORK == 'qa' }}
        with:
          ref: refs/tags/v2.1.1
      - uses: actions/checkout@v4
        if: ${{ env.NETWORK == 'test' }}
        with:
          ref: refs/tags/v2.1.1
      - uses: actions/checkout@v4
        if: ${{ env.NETWORK == 'main' }}
        with:
          ref: refs/tags/v2.1.1

      - name: Set up node 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y git libtool tmux redis net-tools
      - name: Install
        run: |
          yarn
          lerna run build --no-private

      - name: Run test dynamic single vm
        id: dynamicsinglevm
        continue-on-error: true
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/dynamic_single_vm.ts
      - name: Run test multiple vms
        id: multiplevm
        continue-on-error: true
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/multiple_vms.ts
      - name: Run test kubernetes
        id: kubernetes
        continue-on-error: true
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/kubernetes.ts
      - name: Run test vm with qsfs
        id: vmqsfs
        continue-on-error: true
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/vm_with_qsfs.ts
      - name: Run test kubernetes with qsfs
        id: kubernetesqsfs
        continue-on-error: true
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/kubernetes_with_qsfs.ts
      - name: Run test kvstore
        id: kvstore
        continue-on-error: true
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/kvstore_example.ts
      - name: Run test zdb
        id: zdb
        continue-on-error: true
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/zdb.ts
      - name: Cleanup - Delete all contracts
        id: deleteall
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/delete_all_contracts.ts

      - name: Run check up - List all contracts
        id: command_step
        run: |
          sleep 15
          output=$(yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/list_all_contracts.ts)
          echo "myOutput=$output" >> $GITHUB_ENV

      - name: Check if contracts are Empty
        run: |
          contract_json=$(echo "${{ steps.command_step.outputs.myOutput }}" | sed '1d;$d')
          # Convert the middle line to three arrays
          IFS=', ' read -r -a arrays <<< "$(echo "$contract_json" | awk -F':|,' '{print $2, $4, $6}')"
          # Check if all three [Name - Node - Rent] contracts are empty
          if [ -n "${arrays[0]}" ] || [ -n "${arrays[1]}" ] || [ -n "${arrays[2]}" ]; then
          echo "Deletion failed; at least one array is not empty."
          exit 1

      - name: Test Results
        run: |
          echo Dynamic Single Vm: ${{ steps.dynamicsinglevm.outcome }}
          echo Multiple Vm: ${{ steps.multiplevm.outcome }}
          echo Kubernetes: ${{ steps.kubernetes.outcome }}
          echo Vmq Qsfs: ${{ steps.vmqsfs.outcome }}
          echo Kubernetes Qsfs: ${{ steps.kubernetesqsfs.outcome }}
          echo Kvstore: ${{ steps.kvstore.outcome }}
          echo Zdb: ${{ steps.zdb.outcome }}
          echo Delete all contracts: ${{ steps.deleteall.outcome }}

      - name: Check test script status
        if: |
          steps.dynamicsinglevm.outcome != 'success' ||
          steps.multiplevm.outcome != 'success' ||
          steps.kubernetes.outcome != 'success' ||
          steps.vmqsfs.outcome != 'success' ||
          steps.kubernetesqsfs.outcome != 'success' ||
          steps.kvstore.outcome != 'success' ||
          steps.zdb.outcome != 'success'
        run: exit 1

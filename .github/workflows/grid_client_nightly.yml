# This workflow will install needed dependencies and run main grid tests.

name: Grid Client Nightly

# on:
#   schedule:
#     - cron: "0 4 * * *"
#   workflow_dispatch:
on: 
  push:
    branches:
      - development_issue_creation

permissions:
  contents: read
  issues: write


jobs:
  deployment-scripts:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        network: ["dev", "qa", "test", "main"]
    env:
      NETWORK: ${{ matrix.network }}
      RMB_PROXY: true
      STORE_SECRET: secret
      MNEMONIC: ${{ secrets.MNEMONIC }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

    steps:
      - uses: actions/checkout@v4
        if: ${{ env.NETWORK == 'dev' }} || ${{ env.NETWORK == 'qa' }} || ${{ env.NETWORK == 'test' }} || ${{ env.NETWORK == 'main' }}
        with:
          ref: refs/tags/v2.5.2

      - name: Set up node 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y git libtool tmux redis net-tools

      - name: Install
        run: |
          yarn
          make build

      - name: Run test dynamic single vm
        id: single_vm
        if: always()
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/dynamic_single_vm.ts
      - name: Run test multiple vms
        id: multiple_vm
        if: always()
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/multiple_vms.ts
      - name: Run test kubernetes
        id: k8s
        if: always()
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/orchestrators/kubernetes_leader.ts
      - name: Run test vm with qsfs
        id: vmqsfs
        if: always()
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/vm_with_qsfs.ts
      - name: Run test kubernetes with qsfs
        id: k8sqsfs
        if: always()
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/orchestrators/kubernetes_with_qsfs.ts
      - name: Run test kvstore
        id: kvstore
        if: always()
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/kvstore_example.ts
      - name: Run test zdb
        id: zdb
        if: always()
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/zdb.ts

      - name: Cleanup - Delete all contracts
        id: delete_all
        run: |
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/delete_all_contracts.ts

      - name: Run check up - List all contracts
        run: |
          sleep 15
          yarn run ts-node --project packages/grid_client/tsconfig-node.json packages/grid_client/scripts/list_all_contracts.ts > output.txt

      - name: Check if contracts are Empty
        run: |
          # print the file content
          cat output.txt

          # Check if Node contracts are empty
          if grep -q "nodeContracts: \[\]" output.txt && ! grep -q "nodeContracts: \[[[:space:]]*\]" output.txt; then
            echo "Deletion failed; The Node Contract is not empty."
            # Print the contract that couldn't be deleted
            exit 1
          fi

      - name: Test Results
        run: |
          echo Dynamic Single Vm: ${{ steps.single_vm.outcome }}
          echo Multiple Vm: ${{ steps.multiple_vm.outcome }}
          echo Kubernetes: ${{ steps.k8s.outcome }}
          echo Vmq Qsfs: ${{ steps.vmqsfs.outcome }}
          echo Kubernetes Qsfs: ${{ steps.k8sqsfs.outcome }}
          echo Kvstore: ${{ steps.kvstore.outcome }}
          echo Zdb: ${{ steps.zdb.outcome }}
          echo Delete all contracts: ${{ steps.delete_all.outcome }}

      - name: Check test script status
        if: |
          steps.single_vm.outcome != 'success' ||
          steps.multiple_vm.outcome != 'success' ||
          steps.k8s.outcome != 'success' ||
          steps.vmqsfs.outcome != 'success' ||
          steps.k8sqsfs.outcome != 'success' ||
          steps.kvstore.outcome != 'success' ||
          steps.zdb.outcome != 'success' ||
          steps.delete_all.outcome != 'success'
        run: exit 1

      - name: Checkout repository again
        uses: actions/checkout@v3

      - name: Create GitHub Issue on Failure
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_ID: ${{ github.run_id }}
          SINGLE_VM: ${{ steps.single_vm.outcome }}
          MULTIPLE_VM: ${{ steps.multiple_vm.outcome }}
          K8S: ${{ steps.k8s.outcome }}
          VM_QSFS: ${{ steps.vmqsfs.outcome }}
          K8S_QSFS: ${{ steps.k8sqsfs.outcome }}
          KV_STORE: ${{ steps.kvstore.outcome }}
          ZDB: ${{ steps.zdb.outcome }}
          DELETE_ALL: ${{ steps.delete_all.outcome }}
        with:
          update_existing: false
          search_existing: open
          filename: .github/issue_template.md
